filetype plugin indent on
set tabstop=4
set shiftwidth=4
set expandtab
set nu
set rnu
set ruler

" Show filename with one window open
set laststatus=2
set statusline+=%F%=%l,%c

let mapleader =','

" Toggle paste without autoindent
set pastetoggle=<leader>v

source ~/.vim/plugins.vim

" visual block no timeout
set notimeout
set ttimeout
set timeoutlen=10
" global clipboard
set clipboard=unnamedplus
" backspace
set backspace=indent,eol,start

" Color schemes
"colorscheme lightning
"colorscheme autumn
"colorscheme asmdev
"colorscheme monokai
"colorscheme molokai
"colorscheme solarized
"colorscheme codeschool
"colorscheme janah
colorscheme panda

" Figure out the system Python for Neovim.
let g:python3_host_prog=substitute(system("which python3"), "\n", '', 'g')

" Underline current line
set cursorline
hi clear CursorLine
hi CursorLine gui=underline cterm=underline
augroup CursorLine
    au!
    au VimEnter,WinEnter,BufWinEnter * setlocal cursorline
    au WinLeave * setlocal nocursorline
augroup END

" Relative number line in current window
augroup BgHighlight
    autocmd!
    au VimEnter,WinEnter,BufWinEnter * set relativenumber
    autocmd WinLeave * set norelativenumber
augroup END

" FIXME: highlights only works when placed here.
" vim-illuminate
hi illuminatedWord ctermbg=DarkGray guibg=DarkGray

" Window movement keys
function! WinMove(key)
  let t:curwin = winnr()
  exec "wincmd ".a:key
  if (t:curwin == winnr()) "we havent moved
    if (match(a:key,'[jk]')) "were we going up/down
      wincmd v
    else
      wincmd s
    endif
    exec "wincmd ".a:key
  endif
endfunction

map <silent> <C-h> :call WinMove('h')<cr>
map <silent> <C-k> :call WinMove('k')<cr>
map <silent> <C-l> :call WinMove('l')<cr>
map <silent> <C-j> :call WinMove('j')<cr>

map <silent> <S-Left> <C-w><lt>
map <silent> <S-Up> <C-w>+
map <silent> <S-Right> <C-w>>
map <silent> <S-Down> <C-w>-

" Zoom / Restore window.
function! s:ZoomToggle() abort
    if exists('t:zoomed') && t:zoomed
        execute t:zoom_winrestcmd
        let t:zoomed = 0
    else
        let t:zoom_winrestcmd = winrestcmd()
        resize
        vertical resize
        let t:zoomed = 1
    endif
endfunction
command! ZoomToggle call s:ZoomToggle()
nnoremap <silent> <leader>z :ZoomToggle<CR>

" open/close location and preview windows
nnoremap <silent> <leader>o :lopen<cr>
" nnoremap <silent> <leader>c :lclose<cr>:pclose<cr>:cclose<cr>

" ripgrep with CtrlP
if executable('rg')
  " Use rg over grep
  set grepprg=rg\ --vimgrep\ --no-heading\ --smart-case

  " bind \ (backward slash) to grep shortcut
  command -nargs=+ -complete=file -bar Rg silent! grep! <args>|cwindow|redraw!
  nnoremap \ :Rg<SPACE>
endif

" bind <leader>f to grep word under cursor
nnoremap <leader>f :grep! "\b<C-R><C-W>\b"<CR>:cw<CR>

" vim tabs
nnoremap <silent> <leader>c :tabnew<cr>
nnoremap <silent> <leader>n :tabnext<cr>
nnoremap <silent> <leader>p :tabprevious<cr>

" python debug
nmap <leader>/ oimport ipdb; ipdb.set_trace()<ESC>
